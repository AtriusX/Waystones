package xyz.atrius.waystones

import io.papermc.paper.plugin.loader.PluginClasspathBuilder
import io.papermc.paper.plugin.loader.PluginLoader
import io.papermc.paper.plugin.loader.library.impl.MavenLibraryResolver
import org.eclipse.aether.artifact.DefaultArtifact
import org.eclipse.aether.graph.Dependency
import org.eclipse.aether.repository.RemoteRepository
import org.slf4j.LoggerFactory
import xyz.atrius.waystones.autogenerated.WaystoneDependencyVersions
import xyz.atrius.waystones.internal.PluginEntrypoint

@PluginEntrypoint
@Suppress("UnstableApiUsage")
class WaystonesLoader : PluginLoader {

    private val repository = RemoteRepository
        .Builder("paper", "default", "https://repo.papermc.io/repository/maven-public/")
        .build()

    override fun classloader(classpathBuilder: PluginClasspathBuilder) {
        logger.info("Resolving external dependencies, this could take a bit...")

        val resolver = MavenLibraryResolver().apply {
            addDependency("io.arrow-kt:arrow-core-jvm:${WaystoneDependencyVersions.arrowVersion}")
            addDependency("org.flywaydb:flyway-core:${WaystoneDependencyVersions.flywayVersion}")
            addDependency("org.flywaydb:flyway-mysql:${WaystoneDependencyVersions.flywayVersion}")
            addDependency("org.xerial:sqlite-jdbc:${WaystoneDependencyVersions.sqliteVersion}")
            addDependency("com.mysql:mysql-connector-j:${WaystoneDependencyVersions.mysqlVersion}")
            // Add Paper's dependency repo
            addRepository(repository)
        }

        classpathBuilder.addLibrary(resolver)
    }

    private fun MavenLibraryResolver.addDependency(dependency: String) = addDependency(
        Dependency(DefaultArtifact(dependency), null)
    )

    companion object {

        private val logger = LoggerFactory
            .getLogger(WaystonesLoader::class.java)
    }
}
